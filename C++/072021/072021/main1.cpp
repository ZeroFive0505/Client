#include <iostream>

/*
* 지역변수 : 특정 코드블록 안에 선언되는 변수를 지역변수라고 한다.
* 함수의 인자는 지역변수에 속한다.
* 지역변수는 해당 지역을 벗어나게 될 경우 사용할 수 없다.
* 해당 지역에 진입하는 순간 다시 사용할 수 있게 되고 이전에 사용되던 값은 유지가 안된다.
* 
* 전역변수 : 코드블록 바깥에 선언되는 변수를 전역변수라고 한다.
* 전역변수는 해당 변수를 선언한 곳 아래의 모든 코드에서 사용할 수 있게 되고
* 프로그램이 시작될때 메모리에 공간이 만들어지고 프로그램이 종료될때 메모리 공간에서 사라진다.
* 즉, 프로그램이 계속 실행되는 동안에는 같은 값을 유지하면서 어느 곳에서든 이용이 가능하다.
* 
* 정적변수 : static 키워드를 이용해서 정적변수를 만들어 줄 수 있다.
* 지역변수를 선언할때 변수 타입 앞에 static 키워드를 분여주면 정적변수가 된다.
* 정적변수는 전역변수처럼 프로그램이 종료될때까지 메모리가 그대로 유지된다.
* 정적변수의 초기화는 처음 딱 1번만 진행이되고 다음 부터는 초기화 코드는 무시된다.
* 정적변수도 코드블록 내에 지역변수로 선언하면 해당 코드블록 외부에서는 사용이 불가능하다.
* 
* 실행 파일은 작성한 코드가 0101과 같은 이진코드가 되어 실행파일에 저장이 된다.
* 실행파일을 더블 클릭해서 프로그램을 동작시키게 되면 이러한 이진코드가 메모리에 올라가게 되고
* cpu가 해당 메모리의 코드를 이용해서 연산하여 프로그램이 동작되는 방식이다.
* 즉, 코드도 메모리에 올라가는 것이다.
* 
* 코드, 변수 등등 종류에 따라서 할당되는 메모리 영역이 달라지게 된다.
* 
* 메모리 영역에는 크게 4가지의 영역이 있다.
* 코드 영역 : 실행할 코드가 저장되는 공간이다. 
* 데이터 영역 : 전역 변수, 정적 변수가 저장될 공간이다.
* 스택 영역 : 지역 변수가 저장될 공간이다.
* 힙 영역 : 동적할당된 변수가 저장될 공간이다.
*/


int g_Number11 = 1010;

// 함수 선언부분과 구현부분으로 나눌 수 있다.
void OutputNumber(int Number);

void Test()
{
	int Number1 = 300;
	std::cout << "Number1 " << Number1 << "\n";

	Number1 += 300;

	static int Number3 = 100;

	std::cout << "Number3 " << Number3 << "\n";

	Number3 += 100;

	{
		int Number2 = 500;
		static int Number4 = 999;

		std::cout << "Number4 " << Number4 << "\n";

		Number4 += 100;
	}

	// std::cout << Number2 << "\n";
	// std::cout << Number4 << "\n";
	std::cout << g_Number11 << "\n";
}

// 함수의 디폴트 인자 : 기본값을 설정해둔다. 만약 인자를 안 넣어주면 기본값으로 설정이되고
// 넣어주면 넣어 준 값으로 설정

// 인자가 0 ~ 1개
void OutputDefaultParam(int Number = 300)
{
	std::cout << Number << "\n";
}

// 디폴트 인자는 가장 오른쪽 인자부터 지정할 수 있다.
// 인자 1 ~ 2개
//void OutputDefaultParam(int Number, int Number2 = 400)
//{
//
//}

int main()
{
	int Number = 100;
	// 함수를 호출하게 되면 해당 메모리로 이동하여 코드를 동작시키고 다시 여기로 돌아오는 방식으로 동작.
	// 함수의 이름 자체가 해당 함수의 메모리 주소이다.
	// 함수 포인터는 이런 함수의 주소를 저장할 수 있는 포인터 변수이다.
	OutputNumber(Number);

	std::cout << "OutputNumber Addr : " << OutputNumber << "\n";

	std::cout << g_Number11 << "\n";

	g_Number11 = 9990;

	Test();


	OutputDefaultParam();
	OutputDefaultParam(999);

	// Number1 = 300;

	return 0;
}

void OutputNumber(int Number)
{
	std::cout << Number << "\n";
}