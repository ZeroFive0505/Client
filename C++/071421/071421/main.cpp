
#include <iostream>

int main()
{
    /*
    배열 : 같은 타입의 변수 여러개를 하나의 이름으로 생성해줄때 사용하는 문법이다.
    예를 들어 int타입 변수 1000개짜리 배열이 만들어진다면 메모리에 4000바이트만큼의 공간을
    연결되게 할당을 해준다.
    형태 : 변수타입 배열명[개수]; 로 선언이 된다.
    예) int NumArray[1000];

    배열의 각 요소에 접근을 하기 위해서 인덱스를 사용하게 된다.
    인덱스는 0번부터 시작하여 개수 - 1 까지 인덱스가 존재한다.
    만약 허용되는 인덱스의 범위를 벗어나게 된다면 에러가 발생한다.
    1000개 짜리인데 0 ~ 999 까지는 인덱스가 존재하지만 1000번 이상을 접근하게 될 경우
    허용되지 않은 메모리에 접근하게 되므로 문제가 발생하는 것이다.

    배열을 선언과 동시에 초기화를 해줄때 배열선언 뒤에 = {} 를 해주고 중괄호 안에 원하는 값을
    넣어주면 차례대로 0번 인덱스부터 값이 부여되게 된다.
    단, 모든 요소에 대해 넣어주지 않으면 넣어준 인덱스들은 해당 값으로 할당이 되고
    나머지 요소들은 모두 0으로 초기화된다.
    = {}; 을 해서 아무것도 없을 경우 전체가 0으로 초기화가 된다.

    배열을 선언할때 배열의 개수는 변수로 지정이 불가능하다.(동적배열선언시 가능)
    개수는 숫자로만 선언이 가능하다.
    인덱스 접근은 변수로도 가능하다.
    */
    // 아래는 전체를 0으로 초기화한다.
    const int Count = 100;
    int NumberArray[Count] = {};

    // 아래는 0 ~ 4번 인덱스까지 차례대로 1, 2, 3, 4, 5 가 값이 부여되고
    // 나머지는 모두 0으로 초기화가 된다.
    int NumberArray1[100] = { 1, 2, 3, 4, 5 };
    int Number = 2;

    for (int i = 0; i < 100; ++i)
    {
        NumberArray1[i] = i * 10;
    }

    for (int i = 0; i < 100; ++i)
    {
        std::cout << NumberArray1[i] << std::endl;
    }

    /*
    다차원배열 : 여러차원에 걸쳐 배열의 개수를 지정하고 사용이 가능하다.
    int Number[5][10];
    이렇게 다차원 배열을 선언하면 배열의 총 개수는 5 * 10 이 되어 50개가 된다.
    int Number[5][10][10];
    */
    int NumberArray2[5][10] = {};

    for (int i = 0; i < 5; ++i)
    {
        for (int j = 0; j < 10; ++j)
        {
            // i, j의 값을 이용해서 0 ~ 49까지의 값을 만들어낸다.
            NumberArray2[i][j] = i * 10 + j;
        }
    }

    int NumberArray3[50] = {};

    for (int i = 0; i < 5; ++i)
    {
        for (int j = 0; j < 10; ++j)
        {
            NumberArray3[i * 10 + j] = i * 10 + j;
        }
    }

    for (int i = 0; i < 50; ++i)
    {
        std::cout << NumberArray3[i] << std::endl;
    }


    return 0;
}
